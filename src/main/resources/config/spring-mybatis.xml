<?xml version="1.0" encoding="UTF-8"?>  
    <beans xmlns="http://www.springframework.org/schema/beans"  
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
        xmlns:context="http://www.springframework.org/schema/context"  
        xmlns:mvc="http://www.springframework.org/schema/mvc"  
        xsi:schemaLocation="http://www.springframework.org/schema/beans    
                            http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                            http://www.springframework.org/schema/context    
                            http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                            http://www.springframework.org/schema/mvc    
                            http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">  
       <!-- 自动扫描 -->
    		<context:component-scan base-package="com.hywl.cck.**.service" />
    		<context:component-scan base-package="com.hywl.cck.**.mapper" /> 
    	
    	 <!-- 导入ehcache配置文件 -->
    	<import resource="classpath:config/spring-ehcache.xml" />
    		
    	<!--导入shiro配置文件-->
    	<import resource="spring-shiro.xml"/>	
    		
        <!-- 引入配置文件 -->  
       <!--<bean id="propertyConfigurer"  
            class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
            <property name="location" value="classpath:config/jdbc.properties" />  
        </bean>    --> 
        
        <bean
           class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
             <property name="locations">
               <list>
                <value>classpath:config/jdbc.properties</value>
                <value>classpath:config/redis.properties</value>
               </list>
             </property>
        </bean>
        
      
        <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  
            destroy-method="close">  
            <property name="driverClassName" value="${jdbc.driver}" />  
            <property name="url" value="${jdbc.url}" />  
            <property name="username" value="${jdbc.username}" />  
            <property name="password" value="${jdbc.password}" />  
            <!-- 初始化连接大小 -->  
            <property name="initialSize" value="${initialSize}"></property>  
            <!-- 连接池最大数量 -->  
            <property name="maxActive" value="${maxActive}"></property>  
            <!-- 连接池最大空闲 -->  
            <property name="maxIdle" value="${maxIdle}"></property>  
            <!-- 连接池最小空闲 -->  
            <property name="minIdle" value="${minIdle}"></property>  
            <!-- 获取连接最大等待时间 -->  
            <property name="maxWait" value="${maxWait}"></property>  
        </bean> 
        
        
        
        <!-- spring 配置redis -->
         <!-- redis config start -->
    <!-- 配置JedisPoolConfig实例 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxTotal" value="${redis.maxActive}" />
        <property name="maxWaitMillis" value="${redis.maxWait}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>

    <!-- 配置JedisConnectionFactory -->
    <bean id="jedisConnectionFactory"
        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}" />
        <property name="port" value="${redis.port}" />
        <property name="password" value="${redis.pass}" />
        <property name="database" value="${redis.dbIndex}" />
        <property name="poolConfig" ref="poolConfig" />
    </bean>

    <!-- 配置RedisTemplate -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
    </bean>

    <!-- 配置RedisCacheManager -->
    <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg name="redisOperations" ref="redisTemplate" />
        <property name="defaultExpiration" value="${redis.expiration}" />
    </bean>

    <!-- 配置RedisCacheConfig -->
    <bean id="redisCacheConfig" class="com.hywl.cck.base.unit.RedisCacheConfig">
        <constructor-arg ref="jedisConnectionFactory" />
        <constructor-arg ref="redisTemplate" />
        <constructor-arg ref="redisCacheManager" />
    </bean>
    <!-- redis config end --> 
      
        <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	        <property name="dataSource" ref="dataSource" />
	        <!-- 自动扫描mapping.xml文件 -->
	       <!-- ** 表示所有包-->
	        <property name="mapperLocations" value="classpath:mybatis/**/*.xml"></property>
	        <property name="configLocation" value="classpath:config/mybatis-config.xml" />
	    </bean>
      
        <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	        <!-- *表示所有返回类型, ..表示当前包下的所有子包 ,*表示所有类 ,表示所有方法 (..)表示所有参数 -->
	        <property name="basePackage" value="com.hywl.cck.**.mapper" />
	        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	    </bean> 
      
        <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
        <bean id="transactionManager"  
            class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
            <property name="dataSource" ref="dataSource" />  
        </bean>  
      
    </beans>  